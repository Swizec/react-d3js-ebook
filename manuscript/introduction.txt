# Introduction

Hi, I wrote this book for you as an experiment. The theory we’re both testing is that mid-length technical content works better as a short ebook than it does a blogpost.

You see, the issue with technical blogging is that blogposts live and die by their length. As soon as you broach the 700 word mark, things start falling apart. Readers wander off to a different tab and never return.

Which sucks for me as a writer, but more importantly, it sucks for you as a reader. You’re not going to learn something if you don’t even finish reading it.

So here we both are. 

I’m counting on you to take some time away from the internet. To actually sit down and read. To follow the examples. To *learn*.

You’re counting on me to have taken more care in crafting this than I would a blogpost. And I have.

We’re respecting each other’s time. I’ve made sure you can grok this in an hour. You promise to focus.

## Why read this book

After an hour with this book, you’ll know how to make React and d3.js play together. You’ll know how to create composible data visualizations. You’re going to understand *why* that’s a good idea, and you will have the tools to build a library of re-usable visualization parts. 

Especially important if you’re making more than one.

Ultimately, you’re going to understand whether React and d3.js together fit the needs of your project.

## What you need to know

I’m going to assume you already know how to code and that you’re great with JavaScript. This isn’t a book about learning JavaScript. But many have been written on the topic and they’re better than what I could mention here between the lines.

I’m also going to assume some knowledge of d3.js. Since it isn’t a widely used library, I’m going to explain the specific bits that we use. Briefly. If you want to learn d3.js in more detail, you should read my book, [Data Visualization with d3.js](https://www.packtpub.com/web-development/data-visualization-d3js).

React is still a new kid on the block, so I’m going to assume less knowledge there. We’re not going to talk about all the details of React, but you’ll be fine even if this is your first time writing React code.

## How to read this book

Relax. Breathe. You’re here to learn. I’m here to teach. Nothing will get between us. I promise Twitter will wait and so will Facebook. 

This is a safe environment. Just you and some code. No distractions.

To get the most out of this material I suggest two things:

1. Try the example code yourself. Don’t just copy paste, type it over. Execute frequently. If something doesn’t fit together, look at the full code on Github, [here](https://github.com/Swizec/h1b-software-salaries).
2. If you already know something and the section looks boring. Skip it. You’re awesome.

# Why React and d3.js

React is Facebook’s response to writing modern JavaScript frontends for the web. It encourages the use of small components that work together to build an entire app. Each is self-contained and only needs to know how to render a small bit of the interface.

But many frameworks have attempted this. Everything from Angular to Backbone and jQuery plugins. But where jQuery plugins fast become messy, Angular depends too much on HTML structure, and Backbone needs a lot of boilerplate, React has found a sweet spot.

I have found it a veritable joy to code in. Using React was the first time I have ever been able to dumbly move a piece of HTML without having anything break in the logic of the app.

Beautiful.

D3.js is Mike Bostock’s infamous data visualization library used by The New York Times and many others. It is a veritable workhorse of the data visualization world and most charting libraries out there use it as their core.

But it is a fairly low-level library. You can’t just say *”I have data, give me a barchart”*. Well you can, but it takes a few more lines of code than that. However once you get used to it, d3 is a joy to use.

Just like React, d3.js is declarative. You tell it what you want, instead of how you want it. It’s great at giving you access straight to SVG so you can manipulate the lines and rectangles yourself. But it isn’t that great at giving you charts.

Which is where React comes in.

Once you’ve created say, a histogram component, you can always get a histogram by writing `<Histogram {...params} />`.

Doesn’t that sound like the best? It does to me.

And to make things even better. Using React you can make many graph and chart components interact with the same data. Which means that when the data changes, everything changes.

Your graph changes. Its title changes. Its description changes. Even the user controls change.

A powerful combination indeed.

